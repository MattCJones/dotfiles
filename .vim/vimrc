"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Matt's Vim Configuration File
"   ':help <command>' for help
"   ':help user-manual' to learn Vim
"   ':h vim-script-intro' to learn Vim Script
"   ':set all?' to see currently set configuration settings
"   ':set all&' to set default settings
"   ':source $MYVIMRC' to update configuration changes
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Preamble Load Settings {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- Allow user input of file paths, e.g., vi --cmd="let user_plugins_path=''"
let user_plugins_path = exists('user_plugins_path') ? 
    \ user_plugins_path : "~/.vim/vimrc_plugins" 
let user_local_path = exists('user_local_path') ?
    \ user_local_path : "~/.vim/vimrc_local"

"- Load default Vim configuration
source $VIMRUNTIME/defaults.vim

"- Load built-in plugins
silent! packadd! cfilter  " 'Cfilter /PAT/' to filter quickfix list

"- Load local settings
if filereadable(expand(user_local_path))
  execute "source " . user_local_path
endif

"- Load user plugins
if filereadable(expand(user_plugins_path))
  execute "source " . user_plugins_path
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Basic Settings {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- Appearance and layout
set colorcolumn=80,100    " highlight columns
set hlsearch              " highlight matches
set incsearch             " highlight search while typing
set laststatus=2          " always show status line in last window
set lazyredraw            " wait to draw result of repeated macros
set linebreak             " linewrap full words
set number                " line numbers; use with relativenumber
set relativenumber        " relative line numbers
set splitright            " open vertical splits on right hand side
set scrolloff=0           " lines of buffer from top/bottom of display

"- Command prompt completion
set wildignore=*.o,*~,*.pyc,__pycache__,*.dep,*.png,*.jpg,*.gif,*.swp
set wildmode=longest,list " complete common match then show available
set wildcharm=<C-z>       " used in macros to initiate <S-Tab> completion

"- Movement
set mouse=a               " enable use of mouse in normal mode
set nostartofline         " stay in column when C-d, C-u, C-b, C-f

"- Searching
set ignorecase            " use with smartcase
set smartcase             " foo matches Foo and FOO; Foo matches Foo
set matchpairs+=<:>       " match < > with %
set tagcase=match         " match case for tags

"- System
set belloff=all           " no bell chimes while editing
set encoding=utf-8        " only use UTF-8 characters
set hidden                " change buffers without saving
set nobackup              " no backup files
set noesckeys             " fix startup replace mode bug when using WSL
set noswapfile            " no swap files
set nowritebackup         " no backup before writing file
set shell=/usr/bin/bash   " set the shell for :term
set spelllang=en_us       " US dictionary for spell check
set viminfo-=<50,s10      " save large yanks after close
set shell=/usr/bin/zsh    " set default shell to zsh, (default is bash)
set clipboard=            " do not auto copy to clipboard; use + register

"- Tab with spaces
set autoindent            " copy indent from current line to new line
set expandtab             " spaces instead of literal tab
set tabstop=4             " number of spaces in a tab
set shiftround            " round to tab indent level with '<' and '>'
set shiftwidth=4          " number of spaces to use in each (auto)indent
set smarttab              " shiftwidth instead of tabstop at linestart
set softtabstop=4         " backspace through spaced tabs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Basic Key Mappings {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- Leader key mapping; view all leader keys with ':g/<Leader>/'
"- Unmap default <Space> key bind
nnoremap <Space> <nop>
"- Using 'map <Space> <Leader>' to also retain default leader of '\'
map <Space> <Leader>

"- Buffer movement
nnoremap <C-n> :bn<CR>
nnoremap <C-p> :bp<CR>
nnoremap <Leader>d :bd<CR>
nnoremap <Leader>D :Bd<CR>

"- Rebind arrow keys to resize splits
nnoremap <Left> 1<C-w><
nnoremap <Right> 1<C-w>>
nnoremap <Up> 1<C-w>+
nnoremap <Down> 1<C-w>-

"- Make these commands behave intuitively
nnoremap gg gg0
nnoremap G G0
nnoremap Y y$
nnoremap & :&&<CR>

"- Command line (see vim-husk plugin for more features)
"- Expand current path using %%
cnoremap %% <C-r>=expand('%:p:h')<CR>/
"- Bash shell command line movements
cnoremap <C-d> <Delete>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
"- Remap <C-f> for opening command line editor window
set cedit=<C-y>
"- Quickly edit macros e.g. '"<register><Leader>m'; must match cedit key bind
nnoremap <Leader>m :<C-u><C-r>= 'let @'. v:register .'
    \ = '. string(getreg(v:register))<CR><C-e>
"- Save file as root
cmap w!! :w !sudo tee > /dev/null %<CR>

"- File explore
nnoremap <Leader>e :Explore<CR>
"- Tab-explore all files with <S-Tab>
nnoremap <Leader>ge :e **/*<C-z><S-Tab>

" Turn off highlighted values and refresh display with '<Leader>l' and 'yoh'
nnoremap yoh :nohlsearch<CR><C-l>
nnoremap <Leader>l :setlocal signcolumn=auto<CR>:nohlsearch<CR><C-l>

"- Toggle list (display newlines and tabs)
nnoremap yol :setlocal list!<CR>

"- Toggle relative line number
nnoremap yon :setlocal number! relativenumber! signcolumn=no<CR>

"- Toggle scrolloff to maximum so that screen moves with j and k (like Ctrl-z)
nnoremap yoz :let &scrolloff=999-&scrolloff<CR>M

"- Copy/Pasta
"- For use of clipboard, make sure X11 server is enabled
"- Pro-tip: use middle-mouse, i_ctrl-r ctrl-p +, or mappings below
"- Copy highlighted text
vnoremap <Leader>c "+y
"- Copy line
nnoremap <Leader>C "+yy
"- Toggle paste
nnoremap yop :set paste!<CR>:set paste?<CR>
nnoremap <Leader>p :set paste!<CR>:set paste?<CR>
"- Paste on line below
nnoremap <Leader>V :set paste<CR>:put +<CR>:set nopaste<CR>
"- Paste on inline
nnoremap <Leader>v "+p
"- Select pasted text; overrides useless select-mode bind
nnoremap gV `[V`]

"- Toggle spell checking
nnoremap yos :set spell!<CR>:set spell?<CR>
"- Instantly-correct spelling (or use qs1z=q then @s then @@)
nnoremap [S 1z=
nnoremap ]S 1z=

"- Toggle X-hairs
nnoremap yox :set cursorline!<CR>:set cursorcolumn!<CR>

"- Utility command for substitution
nnoremap <Leader>; :%s///ge<Left><Left><Left>
vnoremap <Leader>; :s///ge<Left><Left><Left>

"- Utility commands to input spaces
"- Insert spaces around character
nnoremap css i <Esc>la <Esc>h
nnoremap csh i <Esc>l
nnoremap csl a <Esc>h
"- Insert spaces around line
nnoremap csk mmO<Esc>`m:delmarks m<CR>
nnoremap csj mmo<Esc>`m:delmarks m<CR>

"- Vim RC configuration/source commands
" nnoremap <Leader>v :edit $MYVIMRC<CR>  " 2022-04-03: conflict with paste
nnoremap <Leader>s :source %<CR>:edit %<CR>
nnoremap <Leader>S :source $MYVIMRC<CR>:edit %<CR>

"- Vertical movement - move down in same column based on editor lines
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

"- Set Ctrl-hjkl to move between windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"- Quickfix and file searching
"- Open quickfix window
nnoremap <Leader>q :cwindow<CR>
"- Clear and close quickfix list
nnoremap <Leader>Q :cexpr []<CR>:cclose<CR>
"- Search files that match pattern
nnoremap <Leader>f :<C-u>set path+=.,**<CR>:find 
"- Search for matches in base directory files and below
nnoremap <Leader>/ :<C-u>vimgrep //j
    \ **/*<Left><Left><Left><Left><Left><Left><Left>
nnoremap <Leader>* :<C-u>noautocmd vimgrep /<C-r><C-w>/j **/*<CR>
vnoremap <Leader>* :<C-u>noautocmd vimgrep /<C-r><C-w>/j **/*<CR>
"- Search for matches inside buffer list only and match distinct words
nnoremap <Leader>g/ :<C-u>cexpr []<CR>:<C-u>noautocmd bufdo
    \ vimgrepadd //j %<Left><Left><Left><Left>
nnoremap <Leader>g* :<C-u>cexpr []<CR>:<C-u>noautocmd bufdo
    \ vimgrepadd /\<<C-r><C-w>\>/j %<CR>
vnoremap <Leader>g* :<C-u>cexpr []<CR>:<C-u>noautocmd bufdo
    \ vimgrepadd /\<<C-r><C-w>\>/j %<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Advanced Key Mappings {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- Run macro over visual selection of lines (alternative to '<,'>normal @q)
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

"- Search for selected text, forwards or backwards
"- See https://vim.fandom.com/wiki/Search_for_visually_selected_text
vnoremap <silent> * :<C-u>
  \ let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \ gvy/<C-r>=&ic?'\c':'\C'<CR><C-r><C-r>=substitute(
  \ escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \ gVzv:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-u>
  \ let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \ gvy?<C-r>=&ic?'\c':'\C'<CR><C-r><C-r>=substitute(
  \ escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \ gVzv:call setreg('"', old_reg, old_regtype)<CR>

" Source selected Vimscript text without sourcing entire file with g: or yank
" and :@<reg>
function! SourceVimscript(type)
  let sel_save = &selection
  let &selection = "inclusive"
  let reg_save = @"
  if a:type == 'line'
    silent execute "normal! '[V']y"
  elseif a:type == 'char'
    silent execute "normal! `[v`]y"
  elseif a:type == "visual"
    silent execute "normal! gvy"
  elseif a:type == "currentline"
    silent execute "normal! yy"
  endif
  let @" = substitute(@", '\n\s*\\', '', 'g')
  " source the content
  @"
  let &selection = sel_save
  let @" = reg_save
endfunction
nnoremap g: :set opfunc=SourceVimscript<cr>g@
vnoremap g: :<c-U>call SourceVimscript("visual")<cr>
nnoremap g:: :call SourceVimscript("currentline")<cr>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1


" Abbreviations {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- :(ic)ab[breviate], i for insert mode, c for command line mode
ab date>> <C-r>=strftime('%Y-%m-%d')<CR>
ab time>> <C-r>=strftime('%H:%M')<CR>
iab TODO>> TODO <C-r>=strftime('%F')<CR>
iab IMPL>> IMPL <C-r>=strftime('%F')<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Appearance {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- To check set appearances, use ':verbose hi'
"- Search online for 'xterm 256 colors' to see visual array
if !exists('g:loaded_plug')  " if plugins are disabled
  highlight ColorColumn ctermbg=254
  highlight LineNr ctermbg=254
endif

"- Function: return string if paste is active
"- abort -> function will abort soon as error detected
function! PasteStatus() abort
  if &paste
    let l:pastestatus = "[PASTE]"
  else
    let l:pastestatus = ""
  endif
  return l:pastestatus
endfunction

"- Build status line
set statusline=[%n]%<                         " buffer # and truncation marker
set statusline+=\ %f                          " file path
set statusline+=\ %h%w%m%r%{PasteStatus()}    " various status flags
set statusline+=%=                            " separation of LHS and RHS
set statusline+=\ %y                          " filetype
set statusline+=%-4(\ %c%)::%12(\ %l/%L\ %P%) " column and line information
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Commands {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- Buffers and windows
"- Full screen help and vertical screen help
command! -nargs=1 -complete=help H help <args> | resize 999
command! -nargs=1 -complete=help Vh vertical help <args> | silent
"- Aliases to open commonly-used files
command! Vrc edit $MYVIMRC
command! Vrcp edit ~/.vim/vimrc_plugins
command! Vrcl edit ~/.vim/vimrc_local
command! SVrc source $MYVIMRC
command! Inst source $MYVIMRC | :PlugInstall
command! Tco edit ~/.tmux.conf
command! Brc edit ~/.bashrc
command! Bpr edit ~/.bash_profile
command! Bal edit ~/.bash_aliases
command! Bma edit ~/.bash_matt
command! Bmap edit ~/.bash_matt_private
command! Blo edit ~/.bash_local
command! Zrc edit ~/.zshrc
command! Zma edit ~/.zsh_matt
"- Delete buffer but keep split intact
command! Bd silent! execute "b#|bd#"
"- Delete all buffers but current
command! Bonly silent! execute "%bd|e#|bd#"
"- Open new buffer in a full window
command! New new | only
"- Open scratch buffer in a full window
command! Scratch new | only | setlocal buftype=nofile bufhidden=hide noswapfile

"- Build tags using external ctags program; run from project's base directory
command! Ctags !ctags -R .
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Terminal Mode {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- For help run :h :term or :h terminal-typing
if v:version >= 802
  "- Remap terminal window key (default Ctrl-w), paste with Ctrl-<key> "<reg>
  set termwinkey=<C-q>
  "- Remap <C-q><Esc> to change terminal insert to normal mode 
  tnoremap <C-q><Esc> <C-\><C-N>
  "- Ctrl-Shift-k to delete to end of line
  tnoremap <C-q><C-k> <C-k>
  "- Paste a register (easier than Ctrl-q "<reg>)
  tnoremap <C-q><C-r> <C-q>"
  "- Set Ctrl-hjkl to move between windows while typing in terminal
  tnoremap <C-h> <C-q>h
  tnoremap <C-j> <C-q>j
  tnoremap <C-k> <C-q>k
  tnoremap <C-l> <C-q>l
  "- Old, less-preferred, but keeping for easy reference:
  ""- Hit Ctrl-w twice to delete a word
  "tnoremap <C-w><C-w> <C-w>.
  ""- Remap <Esc> to change terminal insert to normal mode 
  "tnoremap <Esc> <C-\><C-N>
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Autocommands {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- File types
augroup allFiles
  autocmd!
  " Auto-formatting of text, don't auto comment, see :help for specifics
  autocmd FileType * setlocal formatoptions=qlnj
  "- Use literal tabs in a make file
  autocmd FileType make setlocal noexpandtab
  "- Turn on folds for vim file-types; specify desired depth; disable annoying
  "- format options that are added when loading a Vim filetype
  autocmd FileType vim setlocal foldmethod=marker foldlevel=1 
      \ tabstop=2 shiftwidth=2 softtabstop=2
augroup END

"- Buffer events
augroup bufferEvents
  autocmd!
  "- Turn on syntax highlighting for otherwise bland file types
  autocmd BufRead *.dat set filetype=cpp
  autocmd BufRead *.nml set filetype=fortran
  "- Save last session on every write, use 'vim -S ~/.vim/lastSession.vim'
  autocmd BufWritePost *
  \ execute "mksession! ~/.vim/lastSession.vim"
  "- Turn on spell check for certain file types; use i_ctrl-s to complete
  autocmd BufRead *.tex,*.md,*.rst setlocal spell
    \ | syntax spell toplevel
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Working with Tmux {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- Set Ctrl-hjkl to move between windows when using Tmux
if exists('$TMUX')
  "- Code snippet from:
  "- https://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction
  let previous_title = substitute(
        \system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Easter Eggs {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- :Ni!
"- :h 42
"- :h UserGettingBored
"- :h holy-grail
"- :smile
"- :h help!
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1
